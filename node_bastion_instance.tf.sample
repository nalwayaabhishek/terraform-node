# Bastion host[public subnet] to ssh into node_instance in private subnet for debugging. Can be ommitted or manually destroyed.

resource "aws_instance" "node_bastion_instance" {
  ami           = "${lookup(var.AMIS, var.region)}"
  instance_type = "t2.micro"
  key_name = "${aws_key_pair.node_ssh_key.key_name}"
  vpc_security_group_ids = ["${aws_security_group.node_bastion_security_group.id}"]
  subnet_id = "${aws_subnet.node_vpc_public_subnet.id}"
  tags {
    Name = "${var.APP}_bastion_instance"
  }
}

# Anyone can ssh into bastion host(omit with your ip). It can only ssh into intances in private subnet

resource "aws_security_group" "node_bastion_security_group" {
  name = "${var.APP}_bastion_security_group"
  description = "Security group for bastion server"
  vpc_id = "${aws_vpc.node_vpc.id}"
  egress {
      from_port = 22
      to_port = 22
      protocol = "tcp"
      cidr_blocks = ["${var.node_vpc_private_subnet_cidr}"]
  }
  ingress {
      from_port = 22
      to_port = 22
      protocol = "tcp"
      cidr_blocks = ["0.0.0.0/0"]
  }
  tags {
    Name = "${var.APP}_bastion_security_group"
  }
}

# Default properties of subnet does not assign a public IP to instances launched in it. Hence assigning EIP so that user can ssh into bastion and then to instances in private subnets for debugging purposes

resource "aws_eip" "node_bastion_eip"{
  instance = "${aws_instance.node_bastion_instance.id}"
  vpc = true
}

output "bastion_instance_ip"{
  value = "${aws_eip.node_bastion_eip.public_ip}"
}
